"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function attach(term, socket) {
    var addonTerminal = term;
    addonTerminal.__socketio = socket;
    addonTerminal.__flushBuffer = function () {
        addonTerminal.write(addonTerminal.__attachSocketBuffer || "");
    };
    addonTerminal.__pushToBuffer = function (data) {
        if (addonTerminal.__attachSocketBuffer) {
            addonTerminal.__attachSocketBuffer += data;
        }
        else {
            addonTerminal.__attachSocketBuffer = data;
            addonTerminal.__flushBuffer && setTimeout(addonTerminal.__flushBuffer, 10);
        }
    };
    addonTerminal.__getMessageSocketIo = function (data) {
        displayData((data || "").toString());
    };
    function displayData(str, data) {
        addonTerminal.write(str || data || "");
    }
    addonTerminal.__sendData = function (data) {
        socket.send(data);
    };
    addonTerminal._core.register(addSocketListener(socket, "message", addonTerminal.__getMessageSocketIo));
    addonTerminal.__dataListener = addonTerminal.onData(addonTerminal.__sendData);
    addonTerminal._core.register(addonTerminal.__dataListener);
    addonTerminal._core.register(addSocketListener(socket, "close", function () { return detach(addonTerminal, socket); }));
    addonTerminal._core.register(addSocketListener(socket, "error", function () { return detach(addonTerminal, socket); }));
}
exports.attach = attach;
function addSocketListener(socket, type, handler) {
    socket.addEventListener(type, handler);
    return {
        dispose: function () {
            if (!handler) {
                return;
            }
            socket.removeEventListener(type, handler);
        }
    };
}
function detach(term, socket) {
    var addonTerminal = term;
    addonTerminal.__dataListener && addonTerminal.__dataListener.dispose();
    addonTerminal.__dataListener = undefined;
    socket = (typeof socket === "undefined") ? addonTerminal.__socketio : socket;
    if (socket) {
        addonTerminal.__getMessage && socket.removeEventListener("message", addonTerminal.__getMessage);
    }
    delete addonTerminal.__socket;
}
exports.detach = detach;
function apply(terminalConstructor) {
    terminalConstructor.prototype.attach = function (socket) {
        attach(this, socket);
    };
    terminalConstructor.prototype.detach = function (socket) {
        detach(this, socket);
    };
}
exports.apply = apply;
//# sourceMappingURL=xterm-addon-attach-socketio.js.map